type: edu
custom_name: stage5
files:
- name: test/ConverterTest.java
  visible: false
  text: |
    import converter.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;

    class Clue {
        final String input;
        String answer;
        final boolean provideAnswer;

        Clue(final String input, final String answer, final boolean provideAnswer) {
            this.input = input;
            this.answer = answer;
            this.provideAnswer = provideAnswer;
        }

        Clue(final String input, final String answer) {
            this(input, answer, false);
        }

        Clue(final String input) {
            this(input, null, false);
        }
    }


    public class ConverterTest extends StageTest<Clue> {

        public ConverterTest() {
            super(Main.class);
        }

        static TestCase<Clue> testToAnswer(final String input, final String answer, final boolean provideAnswer) {
            return new TestCase<Clue>()
                .setAttach(new Clue(input, answer, provideAnswer))
                .setInput(input);
        }

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                /* Tests with a hint: */
                testToAnswer("10\n0.234\n7", "0.14315", true),
                testToAnswer("10\n10.234\n7", "13.14315", true),
                testToAnswer("6\n2.555\n1", "11", true),
                testToAnswer("35\naf.xy\n17", "148.g88a8", true),
                testToAnswer("10\n11\n2", "1011", true),
                testToAnswer("16\naaaaa.0\n24", "22df2.00000", true),
                testToAnswer("16\n0.cdefb\n24", "0.j78da", true),
                testToAnswer("16\naaaaa.cdefb\n24", "22df2.j78da", true),

                /* Tests without a hint: */
                testToAnswer("10\n0.2340\n7", "0.14315", false),
                testToAnswer("10\n10.2340\n7", "13.14315", false),
                testToAnswer("6\n2.5550\n1", "11", false),
                testToAnswer("35\naf.xy0\n17", "148.g88a8", false),
                testToAnswer("10\n12\n2", "1100", false),
                testToAnswer("16\naaaaa.00\n24", "22df2.00000", false),
                testToAnswer("16\n0.cdefb0\n24", "0.j78da", false),
                testToAnswer("16\naaaaa.cdefb0\n24", "22df2.j78da", false),

                /* Tests from previous stage (with a hint): */
                testToAnswer("10\n11\n2\n", "1011", true),
                testToAnswer("1\n11111\n10\n", "5", true),
                testToAnswer("10\n1000\n36\n", "rs", true),
                testToAnswer("21\n4242\n6\n", "451552", true),
                testToAnswer("7\n12\n11\n", "9", true),
                testToAnswer("5\n300\n10\n", "75", true),
                testToAnswer("1\n11111\n5\n", "10", true),
                testToAnswer("10\n4\n1\n", "1111", true),

                /* Tests from previous stage (without a hint): */
                testToAnswer("10\n12\n2\n", "1100", false),
                testToAnswer("1\n1111111\n10\n", "7", false),
                testToAnswer("10\n1001\n36\n", "rt", false),
                testToAnswer("21\n4243\n6\n", "451553", false),
                testToAnswer("7\n13\n11\n", "a", false),
                testToAnswer("5\n301\n10\n", "76", false),
                testToAnswer("1\n111111\n5\n", "11", false),
                testToAnswer("10\n5\n1\n", "11111", false)
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            final String[] lines = reply
                .lines()
                .filter(line -> !line.isEmpty())
                .toArray(String[]::new);

            if (lines.length == 0) {
                return new CheckResult(
                    false,
                    "Your program doesn't print any line."
                );
            }

            String answer = lines[lines.length - 1];
            answer = answer.replaceAll("[^\\p{Graph}]", "");
            clue.answer = clue.answer.replaceAll("[^\\p{Graph}]", "");

            answer = removeEndZeros(answer);
            clue.answer = removeEndZeros(clue.answer);

            if (!answer.equals(clue.answer)) {
                if (clue.provideAnswer) {
                    return new CheckResult(
                        false,
                        "Your answer is wrong.\n" +
                            "This is a sample test so we give you a hint.\n" +
                            "Input: " + clue.input + "\n" +
                            "Your answer: " + answer + "\n" +
                            "Correct answer: " + clue.answer
                    );
                } else {
                    return new CheckResult(
                        false,
                        "Your answer is wrong."
                    );
                }
            }

            return new CheckResult(true);
        }

        private String removeEndZeros(String number) {
            if (!number.contains(".")) {
                return number;
            }
            while (number.endsWith("0")) {
                number = number.substring(0, number.length() - 1);
            }
            if (number.endsWith(".")) {
                number = number.substring(0, number.length() - 1);
            }
            return number;
        }
    }
  learner_created: false
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;
    import  java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            int input1 = scanner.nextInt();
            int input2 = scanner.nextInt();
            int input3 = scanner.nextInt();

            String s = String.valueOf(input2);

            if (input3 == 1) {
                for (int i = 0; i < input2; i++) {
                    System.out.print(1);
                }
            } else if (input1 == 1) {
                int counter = 0;
                for (int j = 0; j < s.length(); j++){
                    counter++;
                }
                String resultOne = Integer.toString(counter, input3);

                System.out.println(resultOne);
            }
            else {
                int dezimal = Integer.parseInt(s, input1);
                String result = Integer.toString(dezimal, input3);
                System.out.println(result);
            }
        }

            /*switch (input2) {
                case 16:
                    System.out.println(toHex(input1));
                    break;
                case 2:
                    System.out.println(toBinary(input1));
                    break;
                case 8:
                    System.out.println(toOctal(input1));
                    break;
            }
        }

        public static String toHex(int input1){
            String solution = "";
            String solutionBack = "";
            boolean keepGoing = true;
            do {
                int step = input1 % 16;
                if (step < 10) {
                    solution += String.valueOf(step);
                } else if (step >= 10) {
                    switch (step) {
                        case 10:
                            solution += "a";
                            break;
                        case 11:
                            solution += "b";
                            break;
                        case 12:
                            solution += "c";
                            break;
                        case 13:
                            solution += "d";
                            break;
                        case 14:
                            solution += "e";
                            break;
                        case 15:
                            solution += "f";
                            break;
                    }
                }
                input1 /= 16;
                if (input1 == 0) {
                    keepGoing = false;
                }
            } while (keepGoing);
            for (int i = solution.length()-1; i >= 0; i--) {
                solutionBack += solution.charAt(i);
            }
            return "0x" + solutionBack;
        }
        public static String toBinary(int input1) {
            String solution = "";
            String solutionBack = "";
            boolean keepGoing = true;
            do {
                int next = input1 % 2;
                solution += String.valueOf(next);
                input1 /= 2;
                if (input1 <1) {
                    keepGoing = false;
                }
            } while (keepGoing);
            for (int i = solution.length()-1; i >= 0; i--) {
                solutionBack += solution.charAt(i);
            }
            return "0b" + solutionBack;
         }

        public static String toOctal(int input1) {
            String solution = "";
            boolean keepGoing = true;
            String solutionBack = "";

            do {
                int next = input1 % 8;
                solution += String.valueOf(next);
                input1 = input1 / 8;
                if (input1 <1) {
                    keepGoing = false;
                }
            } while (keepGoing);

            for (int i = solution.length()-1; i >= 0; i--) {
                solutionBack += solution.charAt(i);
            }
            return "0" + solutionBack;
        }*/
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/41/stages/218/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/41/stages/218/implement">JetBrains
    Academy</a>
  time: Tue, 07 Jul 2020 20:00:13 UTC
record: 5
